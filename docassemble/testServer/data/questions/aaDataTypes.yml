---
include:
  - gl_baseline.yml
---
metadata:
  title: |
    data types
  tags:
    - Sales
---
id: patch pre-1.4.8 bug
mandatory: True
code: |
  if task_not_yet_performed('erase_none'):
    if defined('data_types') and None in data_types:
      del data_types[None]
    mark_task_as_performed('erase_none')
---
comment: |
  Section labels for child interviews that have follow-up
  questions
variable name: sub_documents
data: !!omap
  - get_report:
      section_link: review_checklist
      section_label: My checklist
      name: Housing Code Checklist and Condition Report
      count: 2
  - tell_landlord: 
      section_link: review_checklist
      section_label: Tell my landlord
      name: Letter to landlord to report bad conditions
      count: 2
---
sections:
  - section_getting_started: Getting started
  - review_datacats: List data categories
  - document_choice: Choose a solution
  - provide_details: Answer questions
  - preview_and_sign: Preview and sign
  - download_conditions_checklist_docs: Download
auto open: False  
---
modules:
  - .load_data
  - docassemble.ALToolbox.misc  
---
mandatory: True
id: interview order
code: |
  intro
  starting_task
  nav.set_section('review_data')        
  data_types.gather()
  if data_types.count_datacats() > 0:
    # This is a bit of a workaround
    for funnel in data_types:
      for datacat in data_types[funnel].entries.true_values():
        data_types[funnel].details[datacat].processing_is_ongoing  
    review_datacats
  else:
    warn_add_datacats
  nav.set_section('document_choice')
  screen_data_is_transferred
  nav.set_section('provide_details')  
  if not screen_data_is_transferred:
    update_sections_with_selected_documents
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    users[0].address.address
    users[0].address.geocode()
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    organizing_interstitial
  else:
    explain_documents
    update_sections_with_selected_documents  
  if screen_data_is_transferred and document_choice['get_report']:
    nav.set_section(sub_documents['get_report'].get('section_link'))
    transfer_details.importing_country
  if screen_data_is_transferred and document_choice['tell_landlord']:
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    transfer_details.importing_country
  nav.set_section('download_datacats_checklist_docs')
  download_datacats_checklist_docs
---
depends on:
  - screen_data_is_transferred
  - document_choice
code: |
  new_sections = []
  if screen_data_is_transferred:
    for document in sub_documents:
      if document in document_choice.true_values():
        new_sections.append({
          sub_documents[document].get('section_link'):  sub_documents[document].get('section_label')
        })
  else:
    new_sections.append({sub_documents['tell_landlord'].get('section_link'): sub_documents['tell_landlord'].get('section_label')})
  old_nav = nav.get_sections()
  
  position = 3 # Current, hardcoded position in the list
  position_label = 'Answer questions'
  for index, item in enumerate(old_nav):
    if next(iter(item)) == 'provide_details':
      position = index
      position_label = next(iter(item.values()))
  old_nav[position] = {position_label: new_sections}

  nav.set_sections(old_nav)

  update_sections_with_selected_documents = True
---
code: |
  store_variables_snapshot(
    {'landlord': other_parties[0].name.full(), 
     'address_street': users[0].address.address,
     'address_city': users[0].address.city,
     'address_zip': users[0].address.zip,
     'data_types': data_types}
     )
  store_for_tenant_sharing = True
---
features:
  javascript:
    - back_button.js
  #navigation: horizontal    
  small screen navigation: dropdown
  progress bar: False
  hide navbar: True
---
objects:
  - dataloader: DataLoader.using(filename="data_category_list.xlsx")
  - data_types: DataCatDict.using(there_are_any=True)
---
depends on:
  - data_types[i].entries
code: |
  data_types[i].entries
  data_types[i].df
  for datacat in data_types[i].entries.true_values():
    data_types[i].details[datacat].processing_is_ongoing
  data_types[i].complete = True
---
code: |  
  data_types[i].details[j].processing_is_ongoing
  data_types[i].details[j].complete = True
---
#features:
#  question back button: False
---
id: intro
question: |
  Add a data processing activity
subquestion: |  
  Be prepared to answer some questions about the products and tools you use. 
continue button field: intro      
---
template: what_problems_can_be_solved
subject: |-
  What can I do?
content: |-
  You can choose what to do. We can help you:

  * Let your landlord know about the problem.
  * Call a housing inspector.
  * Ask a judge to order your landlord to fix the problems.
  * Sue your landlord in court.
  
  ${ action_button_html(url_action('learn_more'), label="Read more first") }  
---
id: intro affirmation
question: |
  You can do this!
subquestion: |  
  #### How this works
  
  This website will help you solve problems with bad conditions in your home.
  <div class="custom-counter">
  <ol class="custom-counter">
  <li>Read about your landlord's responsibilities.</li>
  <li>Track the problems you have in each room of your home.</li>
  <li>Upload photos or add other information about each problem.</li>
  <li>Choose a next step to get your landlord to fix the problems.</li>
  </ol>
  </div>
  
  ${ collapse_template(what_problems_can_be_solved) }
  
continue button field: starting_task  
continue button label: Get started
css: |
  <style>
    .custom-counter ol {
    margin: 0;
    padding: 0;
    list-style-type: none;
    }

    .custom-counter li {
    counter-increment: step-counter;
    margin-bottom: 10px;
    }

    .custom-counter li::before {
    content: counter(step-counter);
    margin-right: 5px;
    font-size: 80%;
    background-color: black;
    color: white;
    font-weight: bold;
    padding: 3px 8px;
    border-radius: 50%;
    }
  </style>  

---
id: track datacats intro
question: |
  Track your housing problems
subquestion: |
  This website will help you track.
continue button field: track_datacats_intro  
---
id: learn more
question: |
  Solve your housing problems
subquestion: | 
  ${ collapse_template(how_to_defend_eviction_template) }
  ${ collapse_template(how_to_document_template) }
  ${ collapse_template(how_to_notify_landlord_template) }
  ${ collapse_template(get_inspection_template) }
#  ${ collapse_template(get_injunction_template) }
#  ${ collapse_template(sue_your_landlord_template) } 
continue button field: learn_more
---  
id: funnel chooser
question: |
  The data you process
subquestion: |
  % if len(data_types):
  You have already listed data types within these classes:
  
  % for button in data_types:
  * [:pencil-alt: ${ str(button).capitalize() }](${ url_action('data_types["' + button + '"].entries') } )
  % endfor
  % else:
  Data processing is governed by the [General Data Privacy Regulation](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download). 
  Click the buttons below to learn what compliance means in different categories.
  % endif
field: data_types.new_item_name
buttons:
  code: |
    [button for button in available_buttons if next(iter(button)) not in data_types ]
back button label: |
  Back
post: |
  % if len(data_types.elements):
  ${ action_button_html(url_ask('set_gathered'), label="Skip and continue", color="primary", size="md") }
  % endif
---
code: |
  data_types.gathered = True
  set_gathered = True
---
variable name: available_buttons
data:
  - Special: Special Categories
    image: exclamation
  - Internal: Internal Data
    image: user-tag
  - External: External Data
    image: user-plus
  - Financial: Financial Data
    image: money-bill-wave
  - Historical: Historical Data
    image: history
  - Social: Social Data
    image: user-friends
  - Tracking: Tracking Data
    image: binoculars
---
if: |
  i == 'Special'
undefine:
  - data_types[i].df  
  - data_types[i].complete
id: Claims
question: |
  Special Categories
subquestion: |
  These are special categories of data as defined by the GDPR. They require more substantive measures to ensure the data is protected. 
  
  If you do not see your problem listed below, try a different category.
fields:
  - no label: data_types[i].entries
    datatype: checkboxes
    required: False
    code: |
      datacats_with_help(dataloader, "Yes", search_column="Special")
    default:
      code: |
        data_types[i].entries.true_values() if defined('data_types[i].entries') else []
help: 
  label: |
    Sanitary Code
  content: |
    The problems listed above are cited in the following sections of the
    [sanitary code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
        
    Problem | Sanitary Code
    --------|------------------
    % for row in dataloader.get_rows(allowed_types=["Yes"], filter_column="Special").iterrows():
    ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] }
    % endfor
---
if:
  i != 'Special'
undefine:
  - data_types[i].df
  - data_types[i].complete  
id: Non-special entries
question: |
  Categories within ${ i }
fields:
  - no label: data_types[i].entries
    datatype: checkboxes
    required: False
    code: |
      datacats_with_help(dataloader, i)
    default:
      code: |
        data_types[i].entries.true_values() if defined('data_types[i].entries') else []
help: 
  label: |
    Sanitary Code
  content: |
    The problems listed above are cited in the following sections of the
    [sanitary code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
        
    Problem | Sanitary Code
    --------|------------------
    % for row in dataloader.get_rows(allowed_types=[i], filter_column="Category").iterrows():
    ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] }
    % endfor        
---
id: there is another datacat
question: |
  Do you want to list data in another category?
subquestion: |
  So far you have reviewed problems in ${ comma_and_list([f'"{str(key).capitalize()}"' for key in data_types.keys()]) }.
  
  Tap "yes" if you want to look at problems in another category.
yesno: data_types.there_is_another
---
code: |
  if len(data_types.complete_elements()) >= len(available_buttons): 
    data_types.there_is_another = False
---
depends on:
  - data_types[i].entries
code: |
  data_types[i].df = dataloader.load_rows(data_types[i].entries.true_values())
---
continue button field: review_datacats
id: review datacats
question: |
  Here is what you told us so far
subquestion: |  
  ${ review_datacats_template }
---
template: review_datacats_template
content: |
  % if len(data_types.elements): 
  Click a category below to revisit your choices.
  Click a category to edit the time the problem started, upload evidence,
  and make other changes.
  
  % for category in data_types.elements:
  #### [:pencil-alt: ${ category.title() if not category is None else 'None' }](${ url_action('data_types["' + str(category) + '"].entries') })
  
  % for index, row in data_types[category].df.iterrows():
  * [:pencil-alt: ${ row['Interview description'] }](${ url_action(f'data_types["{str(category)}"].details["{str(index)}"].processing_is_ongoing')})
  % endfor
  % endfor
  % endif
  
  % if len(data_types) < len(available_buttons):
  ${ data_types.add_action() }
  % endif
---
event: warn_add_datacats
question: |
  You haven't added any data categories yet
subquestion: |
  You should add at least one category to continue.
  % if len(data_types): 
  
  Click a category below to revisit your selections.  
  % endif  
  % for category in data_types:
  #### [${ category.title() if not category is None else 'None' }](${ url_action('data_types["' + str(category) + '"].entries') })
  
  % for index, row in data_types[category].df.iterrows():
  * ${ row['Interview description'] }
  % endfor
  % endfor  
  
  % if len(data_types) < len(available_buttons):
  ${ data_types.add_action() }
  % endif
---
objects:
  - transfer_details: DAList.using(there_are_any=True, complete_attribute='complete')
---
id: triage
question: |
  Deciding on your next steps
fields:
  - Is this data transferred to another country?: screen_data_is_transferred
    datatype: yesnoradio
  - note: |
      **Okay.** Then you do not need to worry about transfer mechanisms. 
    show if:
      variable: screen_data_is_transferred
      is: False
  - Are other tenants in your building also having housing problems?: screen_other_tenants_with_problem
    datatype: yesnoradio
    show if: screen_data_is_transferred
  - note: |
      you and your neighbors are stronger together**. You have the right to **organize**
      with other tenants to fight the bad housing conditions.
    show if: screen_other_tenants_with_problem
  - Do you know the details of the data transfer?: screen_knows_transfer_details 
    datatype: yesnoradio
    show if: screen_data_is_transferred
  - note: |
      **You may want to get an IT person involved** Even if you know generally what the transfer is about, you may not have all the details on hand right now. 
    show if:
      variable: screen_knows_transfer_details
      is: False
  - note: |
      **What would you like to do?**    
      Remember, you can come back and fill this out later.
    show if: screen_data_is_transferred
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_data_is_transferred") && val("screen_knows_transfer_details")
    choices:
      - Add details about the data transfer: get_report
      - Save and close: tell_landlord
    default:
      - get_report
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_data_is_transferred") && !val("screen_knows_transfer_details")
    choices:
      - Save and close: tell_landlord
    none of the above: False
    default:
      - get_report

validation code: |
  if screen_data_is_transferred and len(document_choice.true_values()) < 1:
    validation_error("Select at least one.", field="document_choice")
terms:
  retaliated: |
    Retaliation could include evicting you or raising your rent because you
    complained about housing problems. Retaliation is illegal and you have
    protections in a court.
---
id: interview_order_request_housing_inspection
code: |
  users[0].name.first
  users[0].address.address
  users[0].address.geocode()
  other_parties[0].name.first
  other_parties[0].address.address
  interview_order_request_housing_inspection = True
---
id: preview_datacats_checklist_docs
continue button field: preview_datacats_checklist_docs
question: |
  Review your documents before you sign
subquestion: |
  Tap to open the document below in a new window.
  
  If you need to make any changes, tap the navigation labels
  to revisit the section you want to change.
  
  When you are ready, click "next" to add your signature.
---
id: download_datacats_checklist_docs
event: download_datacats_checklist_docs
question: |
  Your documents are ready
subquestion: |
  
  1. Download and print your documents below. You can also send yourself
  or someone else a copy of the documents in an email.
  1. Read the instructions to learn how to file and deliver your
  documents.
  % if defined('trial_court'):
  1. Deliver the court forms to the ${ trial_court } at ${ trial_court.address.on_one_line() }. You can call for instructions at ${ tel(trial_court.phone_number) }.
  % endif
  1. You can come back to this website later to take additional steps.

  % if screen_data_is_transferred:
  ### Some important information about your cross-border data transfers 
  
  % for category in data_types:
  #### Sending `${ category.title()} data` to `${ transfer_details.importing_country }`
  
   % if transfer_details.importing_country.level_of_protection == 'Member country of the EU or the EEA':
  ${ transfer_details.importing_country } belongs to the European Economic Area.
  
  % elif transfer_details.importing_country.level_of_protection == 'Adequate country':
  ${ transfer_details.importing_country } ensures an adequate level of data protection recognized by EU. Data transfers to **${ transfer_details.importing_country }** do not require the use of transfer tools.

  % elif transfer_details.importing_country.level_of_protection == 'Country partially adequate':
  **${ transfer_details.importing_country }** is partially recognized as ensuring an adequate level of data protection by EU for certain specific processing. 

  % elif transfer_details.importing_country.level_of_protection == 'Independent authority and law (s)':
  **${ transfer_details.importing_country }** doesn't ensure an adequate level of data protection recognized by EU.
  
  * Data transfers to **${ transfer_details.importing_country }** require the use of transfer tools. 
  * **${ transfer_details.importing_country }** has a data protection law and an independant data protection authority accredited at the international conference of data protection and privacy commissionners.

  % elif transfer_details.importing_country.level_of_protection == 'With legislation':
  **${ transfer_details.importing_country }** has general legislation on personal data protection or specific provisions, but it doesn't ensure an adequate level of data protection recognized by EU. Data transfers to **${ transfer_details.importing_country }** require the use of transfer tools.

  % elif transfer_details.importing_country.level_of_protection == 'No law':
  **${ transfer_details.importing_country }** doesn't have a data protection law. Therefore, it doesn't ensure an adequate level of data protection recognized by EU. Data transfers to **${ transfer_details.importing_country }** require the use of transfer tools.
  
  % endif
  
  % endfor
  
  % if transfer_details.importing_country.edpb_member == 'No':
  ${ transfer_details.importing_country } is not a member of EDPB.
  % else:
  ${ transfer_details.importing_country } `is` a member of EDPB.
  Find out about their data protection authority [here](${ transfer_details.importing_country.sa_website }).
  
  % endif

  % else: 
  You're ALL GOOD
  % endif

buttons:
  - Exit: leave
---
id: details for this entry
question: |
  More information about "${ data_types[i].df.loc[j]['Interview description'].lower().lstrip() }"
fields:
  - This processing activity is ongoing: data_types[i].details[j].processing_is_ongoing
    datatype: yesno
  - Whose data do you process?: data_types[i].details[j].data_subjects
    choices:
      - Employees
      - Successful Candidates
      - Unsuccessful Candidates
      - Existing Customers
      - Potential Customers
      - Other
  - Please Specify: data_types[i].details[j].data_subjects
    js show if: |
      val("data_types[i].details[j].data_subjects") == "Other"
  - What is the purpose of processing?: data_types[i].details[j].purpose
    choices:
      - Payroll 
      - Personnel File
      - Recruitment
      - Direct Marketing
      - Other
  - Please Specify: data_types[i].details[j].purpose
    js show if: |
      val("data_types[i].details[j].purpose") == "Other"  
  - What format is the data stored in?: data_types[i].details[j].format
    choices:
      - Digital
      - Hardcopy
      - Other
  - Please Specify: data_types[i].details[j].format
    js show if: |
      val("data_types[i].details[j].format") == "Other"
  - Who recieves the data?: data_types[i].details[j].recipients
    choices:
      - Internal department that processes the concerned data
      - Processor
      - Recipients in third countries or international organisations
      - Institutional or commercial partners
      - Other
  - Please Specify: data_types[i].details[j].recipients
    js show if: |
      val("data_types[i].details[j].recipients") == "Other"
  - Do you have a Data Processing Agreement with this processor?:               data_types[i].details[j].recipient_has_DPA
    datatype: yesnoradio
    js show if: |
      val("data_types[i].details[j].recipients") == "Processor"
  - You can upload it here if you have it handy: data_types[i].details[j].files
    datatype: files
    required: False
    show if: data_types[i].details[j].recipient_has_DPA
    image upload type: jpeg        
    accept: |
      "image/*,image/png,image/jpeg,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"   
  - Any additional note you want to add: data_types[i].details[j].description
    datatype: area
    required: False
---
code: |
  countries = objects_from_file("countries_list.yml")
---    
id: names of opposing parties
question: |
  Data transfer details
fields:
  - Exporting Country : transfer_details.exporting_country
    datatype: object
    choices: countries

  - Importing Country : transfer_details.importing_country
    datatype: object
    choices: countries
    
  - What is the proposed legal basis for transferring the data?: transfer_details.transfer_mech
    choices:
      - standard contracts (SCCs) 
      - ad hoc contractual clauses
      - codes of conduct
      - binding corporate rules (BCRs)
      - certification mechanisms
      - another GDPR Article 49 derogation
      
  - Art. 49 Derogation: transfer_details.derogation
    required: false
    js show if: |
      val("transfer_details.transfer_mech['another GDPR Article 49 derogation']")
    choices:
      - the data subject has explicitly consented to the proposed transfer, after having been informed of the possible risks of such transfers for the data subject due to the absence of an adequacy decision and appropriate safeguards;
      - the transfer is necessary for the performance of a contract between the data subject and the controller or the implementation of pre-contractual measures taken at the data subject request;
      - the transfer is necessary for the conclusion or performance of a contract concluded in the interest of the data subject between the controller and another natural or legal person;
      - the transfer is necessary for important reasons of public interest;
      - the transfer is necessary for the establishment, exercise or defence of legal claims;
      - the transfer is necessary in order to protect the vital interests of the data subject or of other persons, where the data subject is physically or legally incapable of giving consent;
      - the transfer is made from a register which according to Union or Member State law is intended to provide information to the public and which is open to consultation either by the public in general or by any person who can demonstrate a legitimate interest, but only to the extent that the conditions laid down in Union or Member State law for consultation are fulfilled inthe particular case.
  - Method of Transfer: transfer_details.method
    datatype: radio
    choices:
      - physical records in-store
      - physical records in the office
      - email
      - internal documentation
      - internal software
      - instant messenger
      - third party software
      - third party communication
      - Other
  - Please Specify: transfer_details.method
    js show if: |
      val("transfer_details.method") == "Other"
---
question: other parties
fields: 
  - I do not know details about the importer: ll_name_unknown
    datatype: yesno
  - note: |
      **Okay**. You can still fill in this form, but you will need
      to write in your landlord's name on every form before you deliver
      it. You may be able to find their name by visiting the Registry of
      Deeds for your city or town.
    show if: ll_name_unknown
  - Are they a person, or a business?: other_parties[0].person_type
    input type: radio
    choices:
      - Business or organization: business
      - Person: individual
    hide if: ll_name_unknown      
  - First name: other_parties[0].name.first
    show if:
      variable: other_parties[0].person_type
      is: "individual"
  - Last name: other_parties[0].name.last
    show if:
      variable: other_parties[0].person_type      
      is: "individual"
  - Suffix: other_parties[0].name.suffix
    code: |
      name_suffix()
    show if:
      variable: other_parties[0].person_type      
      is: "individual"
    required: False      
  - Name of organization or business: other_parties[0].name.first
    show if:
      variable: other_parties[0].person_type
      is: business
validation code: |
  if ll_name_unknown:
    other_parties[0].name.first = "[ Landlord's Name ]"
---
id: your address
question: |
  What is your landlord's address?
fields:
  - I do not know my landlord's address: ll_address_unknown
    datatype: yesno
  - note: |
      **Okay**. You need your landlord's address for many of the forms on
      this website. You can still finish this form but you will need to add
      your landlord's address before you deliver the form.
    show if: ll_address_unknown       
  - Street address: other_parties[0].address.address
    address autocomplete: True
    hide if: ll_address_unknown
  - Unit: other_parties[0].address.unit
    required: False
    hide if: ll_address_unknown    
  - City: other_parties[0].address.city
    hide if: ll_address_unknown  
  - State: other_parties[0].address.state
    hide if: ll_address_unknown  
    code: |
      states_list()
    default: MA      
  - Zip: other_parties[0].address.zip
    required: False
    hide if: ll_address_unknown
validation code: |
  if ll_address_unknown:
    other_parties[0].address.address = "[ Landlord's address ]"
    other_parties[0].address.city = "[ Landlord's city ]"
---
id: explain_documents
continue button field: explain_documents
question: |
  We may have a few more questions
subquestion: |
  On the next screens, we will ask whatever questions are needed to finish
  creating the documents that you asked for. 
  
  At the end, you will have a chance to download and email the documents for
  yourself or send them to someone else.
---
continue button field: explain_sharing
question: |
  Thank you for sharing your information
subquestion: |
  Your name and apartment number will stay private.
---
event: review_checklist
question: |
  Edit answers on your housing code checklist
review:
  - Edit: users[0].name.first
    button: |
      Your name: ${ users[0] }
  - Edit: review_datacats
    button: |
      ${ review_datacats_template }
  - Edit: review_transfer_details
    button: |
      ${ transfer_details[i] }
  - Edit: users[0].address.address
    button: |
      Exporting Country Details: ${ users[0].address_block() }      
  - Edit: other_parties[0].name.first
    button: |
      Importer's Name: ${ other_parties[0] }
  - Edit: other_parties[0].address.address
    button: |
      Importing Country Details: ${ other_parties[0].address.address }
---
code: |
  checklist_attachment.enabled = action_argument('enabled') or screen_data_is_transferred and document_choice['get_report']
---
code: |
  datacats_report_attachment.enabled = action_argument('enabled') or screen_data_is_transferred and document_choice['get_report']
---
code: |
  request_housing_inspection_attachment.enabled = screen_data_is_transferred and document_choice['get_inspection']
---
code: |
  sanitary_code_template_attachment.enabled = screen_data_is_transferred and screen_contacted_housing_inspector and document_choice.get('enforce_inspection') and inspection
---
code: |
  Housing_Temporary_Restraining_Order0002_attachment.enabled = screen_data_is_transferred and document_choice['get_injunction']
---
objects:
  - checklist_attachment: ALDocument.using(title="Data Map Checklist", filename="Data_Map_Checklist")
---
attachment:
  variable name: checklist_attachment[i]
  docx template file: Data_Map_Checklist.docx
---