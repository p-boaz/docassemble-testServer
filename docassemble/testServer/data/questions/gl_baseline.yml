###############################################
# This file holds the default questions for various object
# types. Things like how to ask for a person's name
---
objects:
  - interview_metadata: DADict.using(object_type=DADict.using(auto_gather=False, gathered=True), auto_gather=False, gathered=True)
  - users: GLPeopleList.using(there_are_any=True)
  - data_subjects: DAList.using(there_are_any=True)
  - subprocessors: DAleList.using(ask_number=True)
  - user: GLIndividual
  - third_parties: DAList
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
question:  |
  What is your name?
fields:
  - code: |
      users[0].name_fields()
---
id: who will be on this form
generic object: GLPeopleList
question: |
  Will this form include any ${noun_plural(x.object_name())}?
yesno: x.there_are_any
--- 
generic object: GLPeopleList
id: any other people
question: |
  Do you have any other ${ noun_plural(x.object_name()) } to tell us about?
yesno: x.there_is_another  
---
generic object: GLPeopleList
question: |
  % if hasattr(x, 'ask_number') and x.ask_number and x.target_number == 1:
  Name of ${ noun_plural(x.object_name(),1) }
  % else:
  Name of your first ${ noun_plural(x.object_name(),1) }
  % endif
fields:
  - code: |
      x[0].name_fields()
---
generic object: GLPeopleList
question: |
  Name of the ${ ordinal(i) } ${ noun_plural(x.object_name(), 1) }
fields:
  - code: |
      x[i].name_fields()
--- 
#######################################################
# These small templates are used as labels for prompts.
# This helps us keep questions consistent and translated just once
---
generic object: GLIndividual
template: x.first_name_label
content: |
  First name
default: |
  ${ user_info().first_name }
---
generic object: GLIndividual
template: x.middle_name_label
content: |
  Middle name
---
generic object: GLIndividual
template: x.last_name_label
content: |
  Last name
---
generic object: GLIndividual
template: x.suffix_label
content: |
  Suffix
---
generic object: GLIndividual
template: x.person_type_label
content: |
  Is this a person, or a business?
---
generic object: GLIndividual
template: x.business_name_label
content: |
  Name of business or organization
---
generic object: GLIndividual
template: x.individual_choice_label
content: |
  Person
---
generic object: GLIndividual
template: x.business_choice_label
content: |
  Business or organization
---
# TODO: consider removing default state
id: your address
sets:
  - users[0].address.address
  - users[0].address.unit
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.state
  - users[0].address.country
question: |
  What is your office address?
fields:
  - code: |
      users[0].address_fields()
---
generic object: GLAddress
template: x.address_label
content: |
  Street
---
generic object: GLAddress
template: x.unit_label
content: |
  Unit
---
generic object: GLAddress
template: x.city_label
content: |
  City
---
generic object: GLAddress
template: x.zip_label
content: |
  Zip or postal code
---
generic object: GLAddress
template: x.postal_code_label
content: |
  Postal code
---
generic object: GLAddress
template: x.state_label
content: |
  State
---
generic object: GLAddress
template: x.country_label
content: |
  Country
---

generic object: GLAddendumField
code: |
  x.label = x.field_name.capitalize().replace("_", " ")